# EPIC-TIDE Vocabulary Specification
# Single source of truth for all semantic values in the ecosystem
# Version: 1.0.0

# ============================================
# SEMANTIC FIELDS - What Claude Code generates
# ============================================

SEMANTIC_FIELDS:
  WORK:
    what: 
      type: string
      description: "Goal of this work"
      example: "Initialize PostgreSQL database"
    how:
      type: array<string>
      description: "Steps to execute"
      example: ["Create schema", "Run migrations", "Seed data"]
    metrics:
      type: array<string>
      description: "Success criteria"
      example: ["Database accessible", "Tables created"]

  PATH:
    what:
      type: string
      description: "Project goal"
      example: "Build user management API"
    works:
      type: array<string>
      description: "Work references (names, not IDs)"
      example: ["setup-env", "create-db", "create-api"]
    metrics:
      type: array<string>
      description: "Success milestones"
      example: ["API responds", "Tests pass"]

  TIDE:
    execution:
      type: map<string, STATUS>
      description: "Work name → status mapping"
      example: {"setup-env": "complete", "create-db": "failed"}
    adaptations:
      type: array<ADAPTATION>
      description: "Changes from original PATH"
    learnings:
      type: string
      description: "Insights from this attempt"
      example: "JWT library must be installed first"
    outcome:
      type: OUTCOME
      description: "Overall result"

# ============================================
# SYSTEM FIELDS - What server auto-generates
# ============================================

SYSTEM_FIELDS:
  IDENTIFIERS:
    id:
      type: uuid | sequential
      generator: server
      example: "tide_2024_01_15_a7f3"
    path_id:
      type: string
      generator: server
      derived_from: context
    work_id:
      type: string
      generator: server
      format: "{type}_{timestamp}_{hash}"

  TEMPORAL:
    created_at:
      type: timestamp
      generator: server
      format: ISO-8601
    updated_at:
      type: timestamp
      generator: server
      format: ISO-8601
    completed_at:
      type: timestamp
      generator: server
      format: ISO-8601

  VERSIONING:
    attempt:
      type: integer
      generator: server
      rule: "MAX(attempt) + 1 WHERE path_id = X"
    version:
      type: integer
      generator: server
      default: 1

  INTEGRITY:
    checksum:
      type: string
      generator: server
      algorithm: sha256
    parent_id:
      type: string
      generator: server
      description: "Links to previous TIDE"

# ============================================
# CONTROLLED VALUES - Exact values required
# ============================================

CONTROLLED_VALUES:
  STATUS:
    - complete   # Successfully finished
    - failed     # Error occurred  
    - blocked    # Waiting on dependency
    - reused     # Using result from previous TIDE
    # NO OTHER VALUES ALLOWED

  OUTCOME:
    - success    # All metrics achieved
    - partial    # Some metrics achieved
    - failed     # Critical failure
    # NO OTHER VALUES ALLOWED

  ADAPTATION_TYPE:
    - insert     # Add new work
    - modify     # Change existing work
    - remove     # Delete work
    - reorder    # Change sequence
    # NO OTHER VALUES ALLOWED

# ============================================
# ADAPTATION STRUCTURE - Must follow exactly
# ============================================

ADAPTATION_SCHEMA:
  type: object
  required: [action, target]
  properties:
    action:
      type: ADAPTATION_TYPE
      example: "insert"
    target:
      type: string
      example: "create-api"
    details:
      type: object
      properties:
        position:
          type: string
          example: "before" | "after"
          relative_to: string
        change:
          type: string
          description: "What was modified"
        reason:
          type: string
          description: "Why this adaptation"

# ============================================
# VALIDATION RULES - For Claude Code
# ============================================

VALIDATION_RULES:
  work_name_format:
    pattern: "^[a-z][a-z0-9-]*$"
    example: "setup-database"
    invalid: ["Setup_Database", "SETUP-DB", "setup database"]

  path_name_format:
    pattern: "^[a-z][a-z0-9-]*$"
    example: "user-api"
    invalid: ["UserAPI", "user_api", "User API"]

  metric_format:
    type: string
    max_length: 100
    must_be: "measurable and verifiable"

  learning_format:
    type: string
    max_length: 500
    must_be: "actionable insight"

# ============================================
# SEMANTIC MAPPINGS - For Claude interpretation
# ============================================

SEMANTIC_ALIASES:
  STATUS_ALIASES:
    complete: ["done", "finished", "success", "✅"]
    failed: ["error", "failure", "❌", "broken"]
    blocked: ["waiting", "pending", "⏸️", "stuck"]
    reused: ["cached", "existing", "skip", "♻️"]

  OUTCOME_ALIASES:
    success: ["complete", "done", "working"]
    partial: ["incomplete", "progress", "some"]
    failed: ["broken", "error", "unsuccessful"]

# ============================================
# ERROR MESSAGES - Standard responses
# ============================================

ERROR_VOCABULARY:
  INVALID_STATUS: "Status must be one of: complete, failed, blocked, reused"
  INVALID_OUTCOME: "Outcome must be one of: success, partial, failed"
  INVALID_ADAPTATION: "Adaptation action must be one of: insert, modify, remove, reorder"
  MISSING_FIELD: "Required semantic field missing"
  INVALID_FORMAT: "Field format does not match pattern"