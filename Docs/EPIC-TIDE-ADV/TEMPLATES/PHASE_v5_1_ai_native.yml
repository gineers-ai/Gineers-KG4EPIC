# PHASE Template v5.1 - AI-Native (Corrected Hierarchy)
# Strategic initiative containing multiple PATHs in proper nested structure
# CRITICAL: EPIC-TIDE is EVIDENCE-DRIVEN, not time-driven. Progress by evidence, not schedules.

PHASE:
  id: phase-name  # lowercase-hyphenated
  what: "Strategic objective or initiative"
  version: 1.0
  
  # PHASE CONTEXT - High-level strategic information
  strategy:
    initiative: "Business initiative this phase supports"
    evidence_targets: "Evidence that demonstrates phase completion"
    priority: "High/Medium/Low"
    stakeholders: ["primary-team", "secondary-team"]
    
  # BUSINESS CONTEXT - Why this phase exists
  business:
    problem: "Business problem being solved"
    value: "Expected business value"
    success_metrics: ["Business-level KPI 1", "Business-level KPI 2"]
    budget: "Resource allocation"
    constraints: ["Regulatory", "Technical", "Resource"]
    
  # TECHNICAL CONTEXT - High-level technical approach
  technical:
    architecture: "Overall system design approach"
    platforms: ["Primary technology platform", "Secondary platform"]
    integrations: ["System A", "System B", "External API"]
    data_strategy: "How data flows through the phase"
    security_level: "Required security classification"
    
  # PATH SEQUENCE - Projects within this phase
  paths:
    - path_id: "foundational-path"
      sequence: 1
      dependency: []
      purpose: "What this PATH accomplishes"
    - path_id: "core-features-path"
      sequence: 2
      dependency: ["foundational-path"]
      purpose: "Main feature development"
    - parallel:
        - path_id: "integration-path"
          sequence: 3
          dependency: ["core-features-path"]
          purpose: "External integrations"
        - path_id: "optimization-path"
          sequence: 3
          dependency: ["core-features-path"]
          purpose: "Performance and UX"
    - path_id: "deployment-path"
      sequence: 4
      dependency: ["integration-path", "optimization-path"]
      purpose: "Production deployment"
  
  # SUCCESS CRITERIA - How we know the phase succeeded
  success_criteria:
    business:
      - "Business outcome achieved"
      - "ROI target met"
    technical:
      - "System performance benchmark"
      - "Security requirements met"
    operational:
      - "Support processes established"
      - "Documentation complete"
      
  # RISK MANAGEMENT - Phase-level risks
  risks:
    - risk: "Major risk description"
      category: "Technical/Business/Resource/Evidence"
      probability: "High/Medium/Low"
      impact: "High/Medium/Low"
      mitigation_strategy: "How to address this risk"
      contingency: "What to do if mitigation fails"
      
  # RESOURCE PLANNING - What this phase needs
  resources:
    teams:
      - team: "Engineering Team"
        commitment: "80% until phase evidence achieved"
        skills_needed: ["Node.js", "PostgreSQL", "Docker"]
      - team: "Product Team"
        commitment: "50% until requirements validated"
        skills_needed: ["User Research", "Design"]
    infrastructure:
      - resource: "Development Environment"
        requirement: "Docker-capable machines"
      - resource: "Testing Environment"
        requirement: "Cloud resources for integration testing"
    external:
      - resource: "Third-party API access"
        requirement: "API keys and documentation"
        
  # PHASE LEARNINGS - Accumulated wisdom from all PATHs
  learnings:
    strategic:
      - "High-level insight about the approach"
      - "Business process discovery"
    technical:
      - "Architecture decision that worked well"
      - "Integration pattern that emerged"
    process:
      - "Cross-team collaboration insight"
      - "Planning methodology improvement"
      
  # PATTERNS HARVESTED - Reusable solutions from this phase
  patterns_harvested:
    - pattern: "Solution pattern name"
      scope: "Technical/Process/Business"
      problem: "What category of problems it solves"
      reusability: "When this pattern applies again"
      
  # EXECUTION STATUS - Current state
  status:
    current_state: "Planning/In Progress/Testing/Complete"
    active_paths: ["path-currently-executing"]
    completed_paths: ["path-already-done"]
    blocked_paths: ["path-waiting-for-dependency"]
    
  # PHASE COORDINATION - Cross-PATH management
  coordination:
    shared_resources: ["Database", "Authentication service"]
    integration_points: ["API contracts", "Data schemas"]
    communication_plan: "How teams coordinate"
    decision_authority: "Who makes phase-level decisions"
    
  # SESSION BOOTSTRAP - For new AI sessions
  for_new_session: |
    1. Check current status in status section
    2. Review active_paths to see what's currently running
    3. Check individual PATH files for detailed status
    4. If no active PATHs, start first PATH in sequence
    5. If PATH is complete, move to next in sequence
    6. Update phase learnings when PATHs complete
    7. Coordinate cross-PATH dependencies and resources
    
  # REFERENCES - Methodology and related documents
  references:
    methodology: "Docs/EPIC-TIDE-ADV/EPIC_TIDE_METHODOLOGY_v5_AI_NATIVE.md"
    vocabulary: "Docs/EPIC-TIDE-ADV/EPIC_TIDE_VOCABULARY.yml"
    templates: "Docs/EPIC-TIDE-ADV/TEMPLATES/"
    related_phases: ["previous-phase", "parallel-phase"]
    
  # CURRENT FOCUS - What to work on now
  current_focus:
    active_path: "Which PATH is currently being executed"
    blocking_issue: "Any phase-level blocker"
    next_milestone: "Next major phase deliverable"
    coordination_needed: "Any cross-PATH coordination required"