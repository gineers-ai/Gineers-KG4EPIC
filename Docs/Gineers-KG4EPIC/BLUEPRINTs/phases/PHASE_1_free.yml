# PHASE 1 - Free Foundation (v5 AI-Native)
# Build the foundational KG4EPIC API server to enable immediate EPIC-TIDE usage

PHASE:
  id: phase_1_free
  what: "Build foundational KG4EPIC API server for immediate EPIC-TIDE adoption"
  version: 1.0
  
  # PHASE CONTEXT - High-level strategic information
  strategy:
    initiative: "EPIC-TIDE AI-Native Methodology Implementation"
    evidence_target: "MVP completion verified by working endpoints, then evidence-driven improvements"
    priority: "High - Enables dogfooding of EPIC-TIDE methodology"
    stakeholders: ["Gineers.AI Development Team", "Claude Code Users"]
    
  # BUSINESS CONTEXT - Why this phase exists
  business:
    problem: "No operational system exists to capture, store, and leverage EPIC-TIDE methodology learnings"
    value: "Enable systematic knowledge capture and reuse from AI development sessions"
    success_metrics: 
      - "Daily EPIC-TIDE usage in development sessions"
      - "Pattern extraction from completed WORKs"
      - "Cross-project knowledge reuse"
      - "Reduced redundant work through pattern recognition"
    budget: "Self-funded development time"
    constraints: 
      - "Must work with Claude Code environment"
      - "Security-first approach (POST-only APIs)"
      - "Local development setup"
    
  # TECHNICAL CONTEXT - High-level technical approach
  technical:
    architecture: "RESTful API with PostgreSQL + pgvector for semantic search"
    platforms: ["Node.js + TypeScript", "PostgreSQL + pgvector", "Docker Compose"]
    integrations: ["Claude Code via REST API", "E5-large-v2 embedding model"]
    data_strategy: "Semantic vectors for similarity search, structured data for querying"
    security_level: "Development/Internal - API key authentication, POST-only endpoints"
    
  # PATH SEQUENCE - Projects within this phase
  paths:
    - path_id: "kg4epic-mvp-enriched"
      sequence: 1
      dependency: []
      purpose: "Core MVP API with essential endpoints for EPIC-TIDE operations"
    - path_id: "implement-post-api-enriched"
      sequence: 2
      dependency: ["kg4epic-mvp-enriched"]
      purpose: "Complete POST-only API implementation with security and validation"

  # SUCCESS CRITERIA - How we know the phase succeeded
  success_criteria:
    business:
      - "Can capture WORKs, PATHs, and TIDEs from development sessions"
      - "Semantic search helps find relevant past learnings"
      - "Reduces repetitive work by surfacing existing solutions"
    technical:
      - "Docker stack 'gineers-kg4epic' runs reliably"
      - "All POST endpoints respond successfully with correct data"
      - "pgvector semantic search returns relevant results"
      - "E5-large-v2 embeddings generated consistently"
    operational:
      - "Documentation enables new team members to contribute"
      - "API can be extended for new EPIC-TIDE features"
      - "Error handling provides actionable feedback"
      
  # RISK MANAGEMENT - Phase-level risks
  risks:
    - risk: "E5-large-v2 model download and performance bottlenecks"
      category: "Technical"
      probability: "Medium"
      impact: "Medium"
      mitigation_strategy: "Cache embeddings, use batch processing, consider model optimization"
      contingency: "Fall back to simpler embedding models or async processing"
    - risk: "Docker networking complexity in different environments"
      category: "Technical"
      probability: "Low"
      impact: "Medium"
      mitigation_strategy: "Comprehensive Docker Compose setup with clear networking rules"
      contingency: "Provide alternative connection configurations"
    - risk: "API security model insufficient for future needs"
      category: "Technical"
      probability: "Medium"
      impact: "High"
      mitigation_strategy: "Design with extensible auth, use API keys as foundation"
      contingency: "Migration path to OAuth2 or other enterprise auth"
      
  # RESOURCE PLANNING - What this phase needs
  resources:
    teams:
      - team: "Core Development"
        commitment: "Full commitment until MVP evidence achieved"
        skills_needed: ["Node.js/TypeScript", "PostgreSQL", "Docker", "Vector databases"]
    infrastructure:
      - resource: "Development Environment"
        requirement: "Docker-capable machine with 8GB+ RAM for pgvector"
      - resource: "Model Storage"
        requirement: "~2GB local storage for E5-large-v2 model cache"
    external:
      - resource: "E5-large-v2 embedding model"
        requirement: "Access to Hugging Face model repository"
        
  # PHASE LEARNINGS - Accumulated wisdom from all PATHs
  learnings:
    strategic:
      - "Starting with MVP and iterating works better than over-engineering"
      - "POST-only APIs provide security benefits with minimal complexity overhead"
    technical:
      - "pgvector requires specific type casting for vector operations"
      - "E5-large-v2 needs 'query:' prefix for optimal embedding quality"
      - "Docker container networking requires 'postgres' hostname not 'localhost'"
    process:
      - "v4 enriched WORKs provide essential implementation artifacts"
      - "Cross-session context in PATHs enables faster startup"
      
  # PATTERNS HARVESTED - Reusable solutions from this phase
  patterns_harvested:
    - pattern: "POST-only API design pattern"
      scope: "Technical"
      problem: "Secure API design that prevents URL logging of sensitive data"
      reusability: "Any API that handles sensitive or complex data"
    - pattern: "Semantic search with structured data pattern"
      scope: "Technical"
      problem: "Combining vector similarity with traditional querying"
      reusability: "Knowledge management systems, content discovery"
    - pattern: "Docker-first development pattern"
      scope: "Process"
      problem: "Consistent development environments across team members"
      reusability: "Any project requiring database dependencies"
      
  # EXECUTION STATUS - Current state
  status:
    current_state: "Planning"
    active_paths: []
    completed_paths: []
    blocked_paths: []
    
  # PHASE COORDINATION - Cross-PATH management
  coordination:
    shared_resources: ["PostgreSQL database", "Docker compose stack", "E5-large-v2 model"]
    integration_points: ["Database schema", "API contracts", "Error handling patterns"]
    communication_plan: "Single developer session with cross-PATH learning capture"
    decision_authority: "Primary developer with methodology creator consultation"
    
  # SESSION BOOTSTRAP - For new AI sessions
  for_new_session: |
    1. Check phase status - are we in Planning/In Progress/Testing/Complete?
    2. Review active_paths to see what's currently running
    3. If no active PATH, start with kg4epic-mvp-enriched PATH
    4. If kg4epic-mvp-enriched is complete, move to implement-post-api-enriched
    5. Check individual PATH files for current TIDE status and next actions
    6. Update phase learnings when PATHs complete or major insights are discovered
    7. Coordinate between PATHs by checking shared resources and integration points
    
  # REFERENCES - Methodology and related documents
  references:
    methodology: "Docs/EPIC-TIDE-ADV/EPIC_TIDE_METHODOLOGY_v5_AI_NATIVE.md"
    vocabulary: "Docs/EPIC-TIDE-ADV/EPIC_TIDE_VOCABULARY.yml"
    templates: "Docs/EPIC-TIDE-ADV/TEMPLATES/"
    related_phases: []
    
  # CURRENT FOCUS - What to work on now
  current_focus:
    active_path: "Ready to start kg4epic-mvp-enriched"
    blocking_issue: "None - ready to begin"
    next_milestone: "Working API endpoints that can save/retrieve EPIC-TIDE data"
    coordination_needed: "Ensure consistent database schema across all PATHs"

# PHASE NOTES
# This is the foundational phase that enables the EPIC-TIDE methodology to be
# used systematically. Success here means we can dogfood the methodology
# immediately and capture learnings for continuous improvement.
#
# The "free" designation indicates this is self-funded development focused
# on core functionality without enterprise features.