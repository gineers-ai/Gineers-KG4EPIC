# WORK: Design API Contracts (v4 AI-Native)
# Self-contained REST API specification for EPIC-TIDE backend

WORK:
  id: design-api-contracts
  what: "Design comprehensive RESTful API contracts for EPIC-TIDE backend system"
  
  # CONTEXT - Task environment
  context:
    location: API design and backend architecture phase
    prerequisites:
      - "Database schema defined with all tables"
      - "Vocabulary specification established"
      - "Understanding of client requirements (Claude Code integration)"
      - "Security requirements identified (POST-only for writes)"
    outputs:
      - "Complete OpenAPI 3.0 specification"
      - "Request/response schemas with examples"
      - "Error response standardization"
      - "Authentication and authorization patterns"
    dependencies: ["design-database-schema", "define-vocabulary"]
    
  # KNOWLEDGE - Critical API design information
  knowledge:
    - "POST-only for all write operations improves security and consistency"
    - "Server generates all IDs to prevent conflicts and ensure uniqueness"
    - "Vector embeddings generated server-side using consistent embedding model"
    - "Status transitions must be validated (pending→in_progress→completed/failed)"
    - "Semantic search requires vector similarity with cosine distance"
    - "Concurrent TIDE prevention enforced at API level with 409 Conflict responses"
    - "JSONB fields allow flexible schema evolution without breaking changes"
  
  # EXECUTION
  how:
    - "Define endpoints for WORK operations (POST create, GET retrieve)"
    - "Define endpoints for PATH operations (POST create, GET retrieve)"
    - "Define endpoints for TIDE operations (POST start, PATCH update, GET status)"
    - "Define endpoints for PATTERN operations (GET search, POST extract)"
    - "Define semantic search endpoints with vector similarity"
    - "Specify comprehensive error response structure"
    - "Add request/response examples for all endpoints"
  
  metrics:
    - "All CRUD operations covered for each entity type"
    - "Request/response formats clearly specified"
    - "Error handling documented with status codes"
    - "Examples provided for successful and error scenarios"
  
  # LEARNINGS - From API design experience
  learnings:
    - source: "Initial design review"
      learning: "POST-only writes simplify client implementation and security auditing"
    - source: "Claude Code integration testing"
      learning: "Explicit vocabulary validation reduces client-side errors"
    - source: "Concurrent usage testing"
      learning: "409 Conflict with clear error messages helps clients handle race conditions"
    - source: "Vector search optimization"
      learning: "Limit parameter prevents expensive queries, threshold enables relevance filtering"
  
  # TROUBLESHOOTING - Common API design issues
  troubleshooting:
    - issue: "Clients attempt to create custom IDs"
      symptoms: "400 errors when clients send work_id, path_id in POST requests"
      solution: "Document that server generates IDs, reject client-provided IDs"
      prevention: "Include clear examples showing server-generated ID responses"
    
    - issue: "Vector search returns irrelevant results"
      symptoms: "Semantic search finds matches with very low similarity"
      solution: "Add similarity threshold parameter, default to 0.7"
      prevention: "Document similarity score interpretation and recommended thresholds"
    
    - issue: "Status transition validation errors"
      symptoms: "PATCH requests fail when trying invalid status changes"
      solution: "Document valid status transitions, provide clear error messages"
      prevention: "Include state diagram in API documentation"
    
    - issue: "Large response payloads slow down API"
      symptoms: "GET endpoints timeout or take >1s to respond"
      solution: "Add pagination, limit default response sizes"
      prevention: "Include pagination parameters in all list endpoints"
  
  # COMPLETE IMPLEMENTATION
  artifacts:
    openapi_specification: |
      # EPIC-TIDE API Specification v1.0
      # OpenAPI 3.0
      
      openapi: 3.0.3
      info:
        title: EPIC-TIDE Knowledge System API
        version: 1.0.0
        description: RESTful API for EPIC-TIDE methodology execution and learning capture
        contact:
          name: Gineers.AI
          email: support@gineers.ai
      
      servers:
        - url: http://localhost:3000/api
          description: Development server
        - url: https://kg4epic.gineers.ai/api
          description: Production server
      
      paths:
        # WORK Endpoints
        /works:
          post:
            summary: Create new WORK
            description: Creates a new WORK with server-generated ID and embeddings
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    required: [what, how, metrics]
                    properties:
                      what:
                        type: string
                        minLength: 10
                        description: Human-readable description of the work purpose
                        example: "Setup Node.js project with TypeScript and testing"
                      how:
                        type: array
                        items:
                          type: string
                        minItems: 1
                        description: Steps to execute this work
                        example: ["Create package.json with TypeScript config", "Install dependencies", "Setup Jest testing framework"]
                      metrics:
                        type: array
                        items:
                          type: string
                        minItems: 1
                        description: Success criteria for this work
                        example: ["Project compiles without errors", "Tests run successfully", "TypeScript strict mode enabled"]
            responses:
              201:
                description: WORK created successfully
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WorkResponse'
              400:
                $ref: '#/components/responses/BadRequest'
              500:
                $ref: '#/components/responses/ServerError'
        
        /works/{work_id}:
          get:
            summary: Get WORK by ID
            parameters:
              - name: work_id
                in: path
                required: true
                schema:
                  type: string
                example: work_1735123456_a1b2
            responses:
              200:
                description: WORK details
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/WorkResponse'
              404:
                $ref: '#/components/responses/NotFound'
        
        # PATH Endpoints  
        /paths:
          post:
            summary: Create new PATH
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    required: [what, works, metrics]
                    properties:
                      what:
                        type: string
                        minLength: 10
                        example: "Complete project setup and initial implementation"
                      works:
                        type: array
                        items:
                          type: string
                        minItems: 1
                        description: Array of work_ids in execution order
                        example: ["work_1735123456_a1b2", "work_1735123457_c3d4"]
                      metrics:
                        type: array
                        items:
                          type: string
                        minItems: 1
                        example: ["All setup completed", "Initial implementation working"]
            responses:
              201:
                description: PATH created successfully
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/PathResponse'
              400:
                $ref: '#/components/responses/BadRequest'
        
        # TIDE Endpoints
        /tides:
          post:
            summary: Start new TIDE execution
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    required: [path_id, attempt]
                    properties:
                      path_id:
                        type: string
                        example: path_1735123456_e5f6
                      attempt:
                        type: integer
                        minimum: 1
                        example: 1
            responses:
              201:
                description: TIDE started successfully
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TideResponse'
              409:
                description: Active TIDE already exists for this PATH
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        error:
                          type: string
                          example: "Active TIDE already exists for path_1735123456_e5f6"
                        active_tide_id:
                          type: string
                          example: "tide_1735123456_g7h8"
        
        /tides/{tide_id}:
          get:
            summary: Get TIDE status and details
            parameters:
              - name: tide_id
                in: path
                required: true
                schema:
                  type: string
            responses:
              200:
                description: TIDE details
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TideResponse'
          
          patch:
            summary: Update TIDE execution status
            parameters:
              - name: tide_id
                in: path
                required: true
                schema:
                  type: string
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/Status'
                      execution:
                        type: object
                        description: Work execution status mapping
                        example: {"work_1735123456_a1b2": "completed", "work_1735123457_c3d4": "in_progress"}
                      adaptations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Adaptation'
                      learnings:
                        type: string
                        minLength: 10
                        example: "Project setup required additional TypeScript configuration for strict mode"
                      outcome:
                        $ref: '#/components/schemas/Outcome'
                      metrics_achieved:
                        type: object
                        description: Metrics achievement status
                        example: {"Project compiles without errors": true, "Tests run successfully": false}
            responses:
              200:
                description: TIDE updated successfully
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/TideResponse'
              400:
                $ref: '#/components/responses/BadRequest'
        
        # PATTERN Endpoints
        /patterns/extract:
          post:
            summary: Extract patterns from similar TIDEs
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    required: [tide_ids]
                    properties:
                      tide_ids:
                        type: array
                        items:
                          type: string
                        minItems: 2
                        example: ["tide_1735123456_g7h8", "tide_1735123457_i9j0", "tide_1735123458_k1l2"]
            responses:
              201:
                description: Pattern extracted successfully
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/PatternResponse'
        
        # Search Endpoints
        /search/semantic:
          post:
            summary: Semantic search using vector similarity
            requestBody:
              required: true
              content:
                application/json:
                  schema:
                    type: object
                    required: [query]
                    properties:
                      query:
                        type: string
                        minLength: 3
                        example: "setup nodejs typescript project"
                      entity_type:
                        type: string
                        enum: [works, paths, tides, patterns]
                        default: works
                        example: works
                      limit:
                        type: integer
                        minimum: 1
                        maximum: 50
                        default: 10
                      similarity_threshold:
                        type: number
                        minimum: 0
                        maximum: 1
                        default: 0.7
                        example: 0.8
            responses:
              200:
                description: Search results with similarity scores
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        results:
                          type: array
                          items:
                            allOf:
                              - $ref: '#/components/schemas/WorkResponse'
                              - type: object
                                properties:
                                  similarity_score:
                                    type: number
                                    example: 0.85
      
      components:
        schemas:
          Status:
            type: string
            enum: [pending, in_progress, completed, failed]
            description: Current execution state
          
          Outcome:
            type: string  
            enum: [success, partial, failed]
            description: Overall TIDE result classification
          
          Adaptation:
            type: object
            required: [type, reason, change]
            properties:
              type:
                type: string
                enum: [sequence_change, parameter_adjustment, tool_substitution, requirement_relaxation, scope_expansion, dependency_resolution]
              reason:
                type: string
                minLength: 10
                example: "Docker not available in development environment"
              change:
                type: string
                minLength: 10  
                example: "Used local Node.js installation instead of Docker container"
              impact:
                type: string
                enum: [minor, moderate, major]
                default: minor
          
          WorkResponse:
            type: object
            properties:
              work_id:
                type: string
                example: work_1735123456_a1b2
              what:
                type: string
                example: "Setup Node.js project with TypeScript and testing"
              how:
                type: array
                items:
                  type: string
              metrics:
                type: array
                items:
                  type: string
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
          
          PathResponse:
            type: object
            properties:
              path_id:
                type: string
                example: path_1735123456_e5f6
              what:
                type: string
              works:
                type: array
                items:
                  type: string
              metrics:
                type: array
                items:
                  type: string
              proven:
                type: boolean
                default: false
              version:
                type: string
                default: "1.0"
              created_at:
                type: string
                format: date-time
          
          TideResponse:
            type: object
            properties:
              tide_id:
                type: string
                example: tide_1735123456_g7h8
              path_id:
                type: string
              attempt:
                type: integer
              status:
                $ref: '#/components/schemas/Status'
              execution:
                type: object
              adaptations:
                type: array
                items:
                  $ref: '#/components/schemas/Adaptation'
              learnings:
                type: string
              outcome:
                $ref: '#/components/schemas/Outcome'
              metrics_achieved:
                type: object
              started_at:
                type: string
                format: date-time
              completed_at:
                type: string
                format: date-time
                nullable: true
          
          PatternResponse:
            type: object
            properties:
              pattern_id:
                type: string
                example: pattern_1735123456_m3n4
              distilled_from:
                type: array
                items:
                  type: string
              common_sequence:
                type: object
              proven_adaptations:
                type: object
              typical_issues:
                type: object
              success_metrics:
                type: object
              created_at:
                type: string
                format: date-time
        
        responses:
          BadRequest:
            description: Invalid request data
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Invalid status value: must be one of [pending, in_progress, completed, failed]"
                    details:
                      type: object
                      example: {"field": "status", "value": "working", "allowed": ["pending", "in_progress", "completed", "failed"]}
          
          NotFound:
            description: Resource not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Work not found: work_1735123456_invalid"
          
          ServerError:
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: "Database connection failed"
                    request_id:
                      type: string
                      example: "req_1735123456_x9y0"
    
    request_examples: |
      # API Request Examples
      
      ## Create WORK
      ```bash
      curl -X POST http://localhost:3000/api/works \
        -H "Content-Type: application/json" \
        -d '{
          "what": "Implement user authentication system",
          "how": [
            "Create user model with password hashing",
            "Implement JWT token generation and validation", 
            "Add login and logout endpoints",
            "Create authentication middleware"
          ],
          "metrics": [
            "Users can register with email and password",
            "Login returns valid JWT token",
            "Protected routes require authentication",
            "Passwords are securely hashed"
          ]
        }'
      ```
      
      Response:
      ```json
      {
        "work_id": "work_1735123456_a1b2",
        "what": "Implement user authentication system",
        "how": ["Create user model...", "Implement JWT..."],
        "metrics": ["Users can register...", "Login returns..."],
        "created_at": "2025-01-27T10:30:00Z",
        "updated_at": "2025-01-27T10:30:00Z"
      }
      ```
      
      ## Create PATH
      ```bash
      curl -X POST http://localhost:3000/api/paths \
        -H "Content-Type: application/json" \
        -d '{
          "what": "Complete user management system",
          "works": ["work_1735123456_a1b2", "work_1735123457_c3d4"],
          "metrics": ["User system fully functional", "All security requirements met"]
        }'
      ```
      
      ## Start TIDE
      ```bash
      curl -X POST http://localhost:3000/api/tides \
        -H "Content-Type: application/json" \
        -d '{
          "path_id": "path_1735123456_e5f6",
          "attempt": 1
        }'
      ```
      
      ## Update TIDE with Progress
      ```bash
      curl -X PATCH http://localhost:3000/api/tides/tide_1735123456_g7h8 \
        -H "Content-Type: application/json" \
        -d '{
          "status": "in_progress",
          "execution": {
            "work_1735123456_a1b2": "completed",
            "work_1735123457_c3d4": "in_progress"
          },
          "adaptations": [
            {
              "type": "parameter_adjustment",
              "reason": "Default JWT expiry too short for user experience",
              "change": "Increased JWT expiry from 1 hour to 24 hours",
              "impact": "minor"
            }
          ],
          "learnings": "JWT expiry times need to balance security with user experience"
        }'
      ```
      
      ## Semantic Search
      ```bash
      curl -X POST http://localhost:3000/api/search/semantic \
        -H "Content-Type: application/json" \
        -d '{
          "query": "user authentication jwt tokens",
          "entity_type": "works",
          "limit": 5,
          "similarity_threshold": 0.8
        }'
      ```
    
    error_handling_guide: |
      # Error Handling Guide
      
      ## Standard Error Response Format
      ```json
      {
        "error": "Human-readable error message",
        "code": "MACHINE_READABLE_CODE",
        "details": {
          "field": "problematic_field",
          "value": "invalid_value", 
          "context": "additional_context"
        },
        "request_id": "req_1735123456_x9y0"
      }
      ```
      
      ## Common Error Scenarios
      
      ### 400 Bad Request
      ```json
      // Invalid status value
      {
        "error": "Invalid status value: must be one of [pending, in_progress, completed, failed]",
        "code": "INVALID_STATUS",
        "details": {
          "field": "status",
          "value": "working",
          "allowed": ["pending", "in_progress", "completed", "failed"]
        }
      }
      
      // Missing required field
      {
        "error": "Missing required field: what",
        "code": "MISSING_REQUIRED_FIELD",
        "details": {
          "field": "what",
          "required": true
        }
      }
      
      // Invalid adaptation structure
      {
        "error": "Adaptation missing required fields",
        "code": "INVALID_ADAPTATION",
        "details": {
          "missing_fields": ["reason", "change"],
          "provided": {"type": "parameter_adjustment"}
        }
      }
      ```
      
      ### 404 Not Found
      ```json
      {
        "error": "Work not found: work_1735123456_invalid",
        "code": "RESOURCE_NOT_FOUND",
        "details": {
          "resource_type": "work",
          "resource_id": "work_1735123456_invalid"
        }
      }
      ```
      
      ### 409 Conflict
      ```json
      // Concurrent TIDE prevention
      {
        "error": "Active TIDE already exists for path_1735123456_e5f6",
        "code": "CONCURRENT_TIDE_PREVENTED",
        "details": {
          "path_id": "path_1735123456_e5f6",
          "active_tide_id": "tide_1735123456_g7h8",
          "active_since": "2025-01-27T10:30:00Z"
        }
      }
      ```
      
      ### 422 Unprocessable Entity
      ```json
      // Invalid status transition
      {
        "error": "Invalid status transition from completed to in_progress",
        "code": "INVALID_STATUS_TRANSITION",
        "details": {
          "current_status": "completed",
          "attempted_status": "in_progress",
          "valid_transitions": []
        }
      }
      ```
      
      ## Client Error Handling Best Practices
      
      1. **Check response status codes before parsing JSON**
      2. **Use error codes for programmatic handling**
      3. **Display error messages to users when appropriate**
      4. **Log full error response for debugging**
      5. **Implement retry logic for 5xx errors**
      6. **Validate data client-side before sending**