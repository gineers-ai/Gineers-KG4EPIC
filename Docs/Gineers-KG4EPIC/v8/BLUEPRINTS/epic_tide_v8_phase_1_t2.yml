# BLUEPRINT: EPIC-TIDE v8 Foundation Implementation (Terminal 2)
# Human vision with AI-generated works after CONFIRM
# Fresh start with proper v8 architecture

BLUEPRINT:
  # === METADATA ===
  slug: "epic-tide-v8-phase-1-t2"  # t2 = Terminal 2 execution
  name: "EPIC-TIDE v8 Foundation - Fresh Start"
  
  # === PHASE MANAGEMENT ===
  phase:
    number: 1  # Fresh Phase 1 with v8
    previous_phase_slug: null  # Fresh start, no previous
    goal_change: false  # New beginning, not a change
  
  # === HUMAN SECTION (Vision & Goals) ===
  vision: |
    Create a clean, PASSIVE document storage system for EPIC-TIDE v8.
    KG4EPIC is purely infrastructure - it stores blueprints, executions, and patterns
    that are created by EXTERNAL systems (Claude, humans, etc).
    
    KG4EPIC does NOT execute anything. It does NOT manage workflows. It does NOT
    implement CONFIRM gates. It is a sophisticated filing cabinet with semantic search,
    responding to MCP tool requests to store and retrieve documents.
    
    Key focus: PASSIVE storage, fast retrieval, MCP compatibility.
  
  goals:
    - "Deploy v8 database schema as PASSIVE storage (blueprints, executions, patterns tables)"
    - "Create /api/tool endpoint for MCP server integration"
    - "Implement CRUD operations for all v8 document types"
    - "Enable semantic search using existing embedding services (E5 and ada-002)"
    - "Store documents when Claude/MCP requests storage"
    - "Retrieve documents when Claude/MCP requests retrieval"
    - "NO execution logic - KG4EPIC only stores what others execute"
  
  # === AI SECTION (Generated from Vision) ===
  # NOTE: AI will expand this section after CONFIRM
  
  scope: |
    Technical implementation of EPIC-TIDE v8 PASSIVE storage system.
    Focus on v8 tables for document storage, MCP tool handlers, and search.
    NO execution logic - KG4EPIC only stores what Claude/humans execute elsewhere.
    Leverage existing Docker infrastructure and embedding services for search only.
  
  constraints:
    technical:
      database: "PostgreSQL 15 with pgvector (fresh epic_tide_v8 database)"
      existing_services:
        embeddings_e5: "Port 8000 - E5-large-v2 (1024 dims) - KEEP AS IS"
        embeddings_ada002: "Port 8001 - text-embedding-ada-002 (1536 dims) - KEEP AS IS"
        postgres: "Port 5432 - PostgreSQL container - KEEP AS IS"
      new_api: "Node.js with TypeScript (fresh codebase for v8)"
      storage: "YAML files for blueprints, PostgreSQL for executions"
      mcp_integration:
        endpoint: "Single /api/tool gateway for all MCP operations"
        format: "Strict request/response format per MCP contract"
        tools: "Support both v8 operations AND legacy tool names for MCP"
    
    resources:
      reusable:
        - "Docker compose infrastructure"
        - "Embedding services (both E5 and ada-002)"
        - "PostgreSQL container"
        - "Learned patterns from v5.1 journey"
      must_rebuild:
        - "Database schema (v8 tables)"
        - "API endpoints (v8 structure)"
        - "Execution engine"
        - "CONFIRM gateway"
    
    boundaries:
      must_not_change:
        - "Embedding service ports (8000, 8001)"
        - "PostgreSQL port (5432)"
        - "Docker container names"
      can_adapt:
        - "API structure (complete freedom for v8)"
        - "Database schema (fresh start)"
        - "Execution flow"
  
  # === WORKS (AI generates detailed steps) ===
  works:
    # Foundation Setup
    deploy_v8_database:
      purpose: "Create fresh database with v8 schema"
      verification:
        - "Database epic_tide_v8 created"
        - "5 v8 tables deployed (blueprints, semantic_executions, etc.)"
        - "Vector columns configured for both E5 (1024) and ada-002 (1536)"
        - "All indexes created"
    
    implement_mcp_gateway:
      purpose: "Create /api/tool endpoint for MCP server integration"
      verification:
        - "POST /api/tool endpoint responds correctly"
        - "Request format {tool, arguments} accepted"
        - "Response format {success, result/error} returned"
        - "All required MCP tools mapped to internal functions"
        - "Error handling returns proper error codes"
    
    create_project_structure:
      purpose: "Set up clean v8 project structure"
      verification:
        - "blueprints/ directory for YAML storage"
        - "api/v8/ directory for new API"
        - "Separate concerns clearly"
    
    # MCP Tool Handlers for Document Storage
    implement_blueprint_storage:
      purpose: "Store blueprints when MCP requests"
      verification:
        - "Tool 'blueprint-create' stores document"
        - "Tool 'blueprint-get' retrieves document"
        - "Tool 'blueprint-list' returns all blueprints"
        - "Blueprints stored with locked flag when MCP indicates"
    
    create_blueprint_api:
      purpose: "Human-facing blueprint management with MCP support"
      verification:
        - "POST /api/v8/blueprint/create accepts YAML"
        - "GET /api/v8/blueprint/{slug} returns YAML"
        - "POST /api/v8/blueprint/translate generates semantic version"
        - "Blueprints stored as files AND in database"
        - "MCP tool 'blueprint-create' works through /api/tool"
        - "MCP tool 'blueprint-list' returns formatted text"
    
    # Execution Storage (NOT execution engine!)
    implement_execution_storage:
      purpose: "Store execution records when Claude reports them"
      verification:
        - "Tool 'execution-create' stores new execution record"
        - "Tool 'execution-update' updates status and evidence"
        - "Tool 'execution-get' retrieves execution details"
        - "NO execution logic - just stores what Claude sends"
    
    implement_evidence_storage:
      purpose: "Store evidence when Claude collects it"
      verification:
        - "Tool 'evidence-add' stores evidence records"
        - "Tool 'evidence-list' retrieves evidence for execution"
        - "Evidence linked to executions"
        - "NO collection logic - just stores what's sent"
    
    # Pattern Storage
    implement_pattern_storage:
      purpose: "Store patterns when identified by external systems"
      verification:
        - "Tool 'pattern-create' stores pattern documents"
        - "Tool 'pattern-search' finds similar patterns"
        - "Pattern embeddings generated for search"
        - "NO pattern extraction - just stores what's identified elsewhere"
    
    # Integration
    integrate_embedding_services:
      purpose: "Connect existing embedding services to v8"
      verification:
        - "Both E5 and ada-002 services connected"
        - "Dual embeddings generated for all content"
        - "Semantic search using both embedding types"
        - "No changes to embedding services themselves"
    
    # MCP Compatibility Layer
    create_mcp_adapter:
      purpose: "Adapt v8 operations to MCP tool names"
      verification:
        - "Tool 'phase-create' maps to blueprint creation"
        - "Tool 'work-create' creates work atoms in blueprints"
        - "Tool 'tide-create' starts semantic execution"
        - "Tool 'search-semantic' queries both E5 and ada-002 embeddings"
        - "All MCP tools return proper content array format"
    
    # Testing & Validation
    validate_v8_flow:
      purpose: "End-to-end test of v8 architecture"
      verification:
        - "Create blueprint → Confirm → Execute → Evidence flow works"
        - "TIDE autonomous retry demonstrated"
        - "No human intervention after CONFIRM"
        - "Evidence properly collected"
    
    validate_mcp_integration:
      purpose: "Test MCP server compatibility"
      verification:
        - "MCP can create entities through /api/tool"
        - "MCP can list and search entities"
        - "Response format accepted by MCP server"
        - "Error handling works correctly"
  
  # === SUCCESS CRITERIA ===
  success_criteria:
    - "v8 database schema deployed for PASSIVE storage"
    - "MCP tools can CREATE documents (blueprints, executions, patterns)"
    - "MCP tools can RETRIEVE documents"
    - "MCP tools can UPDATE document status"
    - "Semantic search works across all document types"
    - "NO execution logic present - purely storage"
    - "Response format matches MCP contract exactly"
    - "Claude can store/retrieve through MCP successfully"
  
  # === EVIDENCE REQUIRED ===
  evidence_required:
    - "Screenshot of v8 tables in database"
    - "MCP tool test: blueprint-create stores document"
    - "MCP tool test: execution-update changes status"
    - "MCP tool test: pattern-search returns results"
    - "Semantic search working with both embeddings"
    - "Response format matches MCP contract"
    - "NO execution code present (grep for execution logic returns empty)"
    - "Pure CRUD operations verified"
  
  # === FOR AI AFTER CONFIRM ===
  for_ai: |
    CRITICAL UNDERSTANDING: KG4EPIC is PASSIVE storage only.
    
    You will build:
    1. Database with v8 schema for document storage
    2. /api/tool endpoint that handles MCP requests
    3. CRUD operations - nothing more
    
    You will NOT build:
    - Execution engines
    - Workflow management
    - CONFIRM gateways
    - Autonomous systems
    - Evidence collection logic
    
    KG4EPIC just stores what Claude/humans create elsewhere.
    
  # === HUMAN NOTES ===
  human_notes: |
    - This is Terminal 2 (t2) execution - developer perspective
    - Fresh start approved after v8 alignment assessment
    - Keep Docker infrastructure and embedding services
    - Everything else is fresh implementation
    - Focus on simplicity and correctness over features
    - True dogfooding of v8 principles is the goal
    - MCP integration is CRITICAL for Claude Desktop usage
    - Single /api/tool endpoint must handle all MCP operations
    - Response format must strictly follow MCP contract

# === CONFIRMATION GATE ===
# After human reviews and confirms this blueprint:
# - It becomes locked (immutable)
# - AI gets full autonomy for execution
# - Multiple TIDE attempts allowed
# - No human intervention until phase complete