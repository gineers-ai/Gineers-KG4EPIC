version: '3.8'

name: gineers-kg4epic

services:
  postgres:
    image: pgvector/pgvector:pg15
    container_name: kg4epic-postgres
    environment:
      POSTGRES_DB: epic_tide
      POSTGRES_USER: epic_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-test123}
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U epic_user -d epic_tide"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kg4epic-network

  embeddings:
    build: ./embeddings-service
    container_name: kg4epic-embeddings
    ports:
      - "8000:8000"
    networks:
      - kg4epic-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kg4epic-api
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      DATABASE_URL: postgresql://epic_user:${DB_PASSWORD:-test123}@postgres:5432/epic_tide
      API_KEY: ${API_KEY:-dev_key_change_in_production}
      EMBEDDINGS_SERVICE_URL: http://embeddings:8000
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      embeddings:
        condition: service_healthy
    networks:
      - kg4epic-network
    # Use default CMD from Dockerfile (node dist/index.js)

volumes:
  pgdata:

networks:
  kg4epic-network:
    driver: bridge